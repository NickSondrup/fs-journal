(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{496:function(e,t,s){"use strict";s.r(t);var a=s(1),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"var-let-and-const"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#var-let-and-const"}},[e._v("#")]),e._v(" VAR, LET, and CONST")]),e._v(" "),s("p",[s("strong",[e._v("What is Scope?")])]),e._v(" "),s("p",[e._v("The scope of the variable is where the variable can be uses. Ex: globally scoped compared to function/locally scoped.")]),e._v(" "),s("p",[s("strong",[e._v("What is Hoisting?")])]),e._v(" "),s("p",[e._v("Hoisting is where you place your variables at the top of their scope. This allows variables to always be accessed.")]),e._v(" "),s("p",[s("strong",[e._v("In what cases might you use let vs const vs var?")])]),e._v(" "),s("p",[e._v("Var is helpful if you want to initialize a variable as undefined. let is the most common because it is block scoped, meaning it can't be redeclared in the same scope. const is useful if you want a variable that is impossible to change.")]),e._v(" "),s("p",[s("strong",[e._v("Afternoon Challenge:")])]),e._v(" "),s("p",[e._v("https://nicksondrup.github.io/js-test-basics/")])])}),[],!1,null,null,null);t.default=o.exports}}]);